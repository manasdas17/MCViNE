/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Guide_curved_mark
*
* %I
* Written by: Kristian Nielsen
* Date: September 2 1998
* Version: $Revision: 1.21 $
* Origin: Risoe
* Release: McStas 1.6
*
* Neutron guide.
*
* %D
* Models a rectangular guide tube centered on the Z axis. The entrance lies
* in the X-Y plane.
* For details on the geometry calculation see the description in the McStas
* reference manual.
*
* Example: Guide(w1=0.1, h1=0.1, w2=0.1, h2=0.1, l=2.0, 
*           R0=0.99, Qc=0.021, alpha=6.07, m=2, W=0.003
*
* %P
* INPUT PARAMETERS:
*
* w1:      (m)    Width at the guide entry
* h1:      (m)    Height at the guide entry
* w2:      (m)    Width at the guide exit
* h2:      (m)    Height at the guide exit
* l:       (m)    length of guide
* R0:      (1)    Low-angle reflectivity
* Qc:      (AA-1) Critical scattering vector
* alpha:   (AA)   Slope of reflectivity
* m:       (1)    m-value of material. Zero means completely absorbing.
* W:       (AA-1) Width of supermirror cut-off
*
* %D
* Example values: m=4 Qc=0.0219 W=1/300 alpha=6.49 R0=1
*
* %E
*******************************************************************************/

DEFINE COMPONENT Guide_curved_mark
DEFINITION PARAMETERS ()
SETTING PARAMETERS (w1, h1, l, R0=0.99, Qc=0.0219, alpha=6.07, ml=2, mr=2.0, mb=2.0, mt=2.0,
                    W=0.003, nseg=1, R=5000., dseg=0.001, psi_out, xout, zout)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)

TRACE
%{
  double t1,t2;                                 /* Intersection times. */
  double av,ah,bv,bh,cv1,cv2,ch1,ch2,d;         /* Intermediate values */
  double vdotn_v1,vdotn_v2,vdotn_h1,vdotn_h2;   /* Dot products. */
  int i;                                        /* Which mirror hit? */
  double q;                                     /* Q [1/AA] of reflection */
  double vlen2,nlen2;                           /* Vector lengths squared */
  double alf, iseg, m, ca, sa ;                 /* Angle used to rotate each segment */
  double w2 = w1 ;
  double h2 = h1 ;
  double ztemp, xtemp, vztemp, vxtemp ;

  /* ToDo: These could be precalculated. */
  double ww = .5*(w2 - w1), hh = .5*(h2 - h1);
  double whalf = .5*w1, hhalf = .5*h1;
  double lwhalf = l*whalf, lhhalf = l*hhalf;
  alf = 2. * atan(0.5 * (l + dseg) / R) ;
  ca = cos(alf) ;
  sa = sin(alf) ;
  for (iseg=1 ; iseg < (nseg + 1) ; iseg++ ) 
  {
  /* Propagate neutron to guide segment entrance. */
    PROP_Z0;
    if(x <= -whalf || x >= whalf || y <= -hhalf || y >= hhalf)
     ABSORB;
    for(;;)
    {
      /* Compute the dot products of v and n for the four mirrors. */
      av = l*vx; bv = ww*vz;
      ah = l*vy; bh = hh*vz;
      vdotn_v1 = bv + av;         /* Left vertical */
      vdotn_v2 = bv - av;         /* Right vertical */
      vdotn_h1 = bh + ah;         /* Lower horizontal */
      vdotn_h2 = bh - ah;         /* Upper horizontal */
      /* Compute the dot products of (O - r) and n as c1+c2 and c1-c2 */
      cv1 = -whalf*l - z*ww; cv2 = x*l;
      ch1 = -hhalf*l - z*hh; ch2 = y*l;  
      /* Compute intersection times. */
      t1 = (l - z)/vz;
      i = 0;
      if(vdotn_v1 < 0 && (t2 = (cv1 - cv2)/vdotn_v1) < t1)
      {
        t1 = t2;
        i = 1;
      }
      if(vdotn_v2 < 0 && (t2 = (cv1 + cv2)/vdotn_v2) < t1)  
      {
        t1 = t2;
        i = 2;
      }
      if(vdotn_h1 < 0 && (t2 = (ch1 - ch2)/vdotn_h1) < t1)
      {
        t1 = t2;
        i = 3;
      }
      if(vdotn_h2 < 0 && (t2 = (ch1 + ch2)/vdotn_h2) < t1)
      {
        t1 = t2;
        i = 4;
      }
      PROP_DT(t1);
      if(i == 0) break;           /* Neutron exits guide segment. */
      switch(i)
      {  
        case 1:                   /* Left vertical mirror */
          nlen2 = l*l + ww*ww;
          q = V2Q*(-2)*vdotn_v1/sqrt(nlen2);
          d = 2*vdotn_v1/nlen2;
          vx = vx - d*l;
          vz = vz - d*ww;
          m = ml;
          break;
        case 2:                   /* Right vertical mirror */
          nlen2 = l*l + ww*ww;
          q = V2Q*(-2)*vdotn_v2/sqrt(nlen2);
          d = 2*vdotn_v2/nlen2;
          vx = vx + d*l;
          vz = vz - d*ww;
          m = mr;
          break;
        case 3:                   /* Lower horizontal mirror */
          nlen2 = l*l + hh*hh;
          q = V2Q*(-2)*vdotn_h1/sqrt(nlen2);
          d = 2*vdotn_h1/nlen2;
          vy = vy - d*l;
          vz = vz - d*hh;
          m = mb;
          break;
        case 4:                   /* Upper horizontal mirror */
          nlen2 = l*l + hh*hh;
          q = V2Q*(-2)*vdotn_h2/sqrt(nlen2);
          d = 2*vdotn_h2/nlen2;
          vy = vy + d*l;
          vz = vz - d*hh;
          m = mt;
          break;
      }  
      /* Now compute reflectivity. */
      if(m == 0)
        ABSORB;
      if(q > Qc)
      {
        double arg = (q-m*Qc)/W;
        if(arg < 10)
          p *= .5*(1-tanh(arg))*(1-alpha*(q-Qc));
        else
          ABSORB;                               /* Cutoff ~ 1E-10 */
      }
      p *= R0;
      SCATTER;
    }
  if(iseg==nseg) break ;
  ztemp = (z - l - 0.5 * dseg) * ca + x * sa - 0.5 * dseg ;
  xtemp = ( -z + l + 0.5 * dseg) * sa + x * ca ;
  z = ztemp ;
  x = xtemp ;
  vztemp =  vz * ca + vx * sa ;
  vxtemp = -vz * sa + vx * ca ;
  vz = vztemp ;
  vx = vxtemp ;
  }
  z = z + (nseg -1) * (l + dseg) ;
/*
  psi_out = nseg * alf ;
  zout = 0.5 * l * (1. - cos(psi_out)) + R * sin(psi_out) ;
  xout = R * (1. - cos(psi_out)) - 0.5 * l * sin(psi_out) ;
  zout = 0.0 ;
  xout = 0.0 ;
  z = z + zout ;
  x = x + xout ;
  vztemp = vz * cos(psi_out) - vx * sin(psi_out) ;
  vxtemp = vz * sin(psi_out) + vx * cos(psi_out) ;
  vz = vztemp ;
  vx = vxtemp ;
*/
%}

MCDISPLAY
%{

%}

END
